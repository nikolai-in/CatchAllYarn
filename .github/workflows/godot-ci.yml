# name: "godot-ci export"
# on: push

# env:
#   GODOT_VERSION: 3.3.3
#   EXPORT_NAME: AgarEdu

# jobs:
#   export-windows:
#     name: Windows Export
#     runs-on: ubuntu-latest
#     container:
#       image: barichello/godot-ci:3.3.3
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           lfs: true
#       - name: Setup
#         run: |
#           mkdir -v -p ~/.local/share/godot/templates
#           mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
#       - name: Windows Build
#         run: |
#           mkdir -v -p build/windows
#           godot -v --export "Windows Desktop" ./build/windows/$EXPORT_NAME.exe
#       - name: Upload Artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: windows
#           path: build/windows

#   export-linux:
#     name: Linux Export
#     runs-on: ubuntu-latest
#     container:
#       image: barichello/godot-ci:3.3.3
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           lfs: true
#       - name: Setup
#         run: |
#           mkdir -v -p ~/.local/share/godot/templates
#           mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
#       - name: Linux Build
#         run: |
#           mkdir -v -p build/linux
#           godot -v --export "Linux/X11" ./build/linux/$EXPORT_NAME.x86_64
#       - name: Upload Artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: linux
#           path: build/linux

#   export-web:
#     name: Web Export
#     runs-on: ubuntu-latest
#     container:
#       image: barichello/godot-ci:3.3.3
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           lfs: true
#       - name: Setup
#         run: |
#           mkdir -v -p ~/.local/share/godot/templates
#           mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
#       - name: Web Build
#         run: |
#           mkdir -v -p build/web
#           godot -v --export "HTML5" ./build/web/index.html
#       - name: Upload Artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: web
#           path: build/web
#       # Installing rsync is needed in order to deploy to GitHub Pages. Without it, the build will fail.
#       - name: Install rsync ðŸ“š
#         run: |
#           apt-get update && apt-get install -y rsync
#       - name: Deploy to GitHub Pages ðŸš€
#         uses: JamesIves/github-pages-deploy-action@releases/v3
#         with:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           BRANCH: gh-pages # The branch the action should deploy to.
#           FOLDER: build/web # The folder the action should deploy.

#   export-mac:
#     name: Mac Export
#     runs-on: ubuntu-latest
#     container:
#       image: barichello/godot-ci:3.3.3
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           lfs: true
#       - name: Setup
#         run: |
#           mkdir -v -p ~/.local/share/godot/templates
#           mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
#       - name: Mac Build
#         run: |
#           mkdir -v -p build/mac
#           godot -v --export "Mac OSX" ./build/mac/$EXPORT_NAME.zip
#       - name: Upload Artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: mac
#           path: build/mac

#   release:
#     name: Release builds
#     needs: [export-windows, export-linux, export-mac]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Download builds
#         uses: actions/download-artifact@v2

#       - name: Compress
#         shell: bash
#         run: for build in {mac,linux,windows}; do zip -r $build $build; done

#       - name: upload
#         uses: marvinpinto/action-automatic-releases@latest
#         with:
#           repo_token: "${{ secrets.GITHUB_TOKEN }}"
#           automatic_release_tag: "latest"
#           prerelease: false
#           files: |
#             linux.zip
#             mac.zip
#             windows.zip
